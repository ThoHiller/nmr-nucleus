function [gui,myui] = NUCLEUSmod_createPanelGeometry(data,gui,myui)
%NUCLEUSmod_createPanelGeometry creates geometry panel
%
% Syntax:
%       [gui,myui] = NUCLEUSmod_createPanelGeometry(data,gui,myui)
%
% Inputs:
%       data - figure data structure
%       gui - figure gui elements structure
%       myui - individual GUI settings structure
%
% Outputs:
%       gui
%       myui
%
% Example:
%       [gui,myui] = NUCLEUSmod_createPanelGeometry(data,gui,myui)
%
% Other m-files required:
%       findjobj.m
% Subfunctions:
%       none
% MAT-files required:
%       none
%
% See also: NUCLEUSmod
% Author: see AUTHORS.md
% email: see AUTHORS.md
% License: MIT License (at end)

%------------- BEGIN CODE --------------

%% create all boxes
gui.panels.geometry.VBox = uix.VBox('Parent',gui.panels.geometry.main,...
    'Spacing',3,'Padding',3);

% geometry type & polyN
gui.panels.geometry.HBox1 = uix.HBox('Parent',gui.panels.geometry.VBox,...
    'Spacing',3);
% angles
gui.panels.geometry.HBox2 = uix.HBox('Parent',gui.panels.geometry.VBox,...
    'Spacing',3);
% single pore | PSD
gui.panels.geometry.HBox3 = uix.HBox('Parent',gui.panels.geometry.VBox,...
    'Spacing',3);
% PSD range #dec
gui.panels.geometry.HBox4 = uix.HBox('Parent',gui.panels.geometry.VBox,...
    'Spacing',3);
% # PSD modes
gui.panels.geometry.HBox5 = uix.HBox('Parent',gui.panels.geometry.VBox,...
    'Spacing',3);
% PSD mode1
gui.panels.geometry.HBox6 = uix.HBox('Parent',gui.panels.geometry.VBox,...
    'Spacing',3);
% PSD mode2
gui.panels.geometry.HBox7 = uix.HBox('Parent',gui.panels.geometry.VBox,...
    'Spacing',3);
% PSD mode3
gui.panels.geometry.HBox8 = uix.HBox('Parent',gui.panels.geometry.VBox,...
    'Spacing',3);

%% geometry type
gui.text_handles.geometry_type = uicontrol('Parent',gui.panels.geometry.HBox1,...
    'Style','text','FontSize',myui.fontsize,'HorizontalAlignment','center',...
    'String','pore geometry | # sides');
tstr = ['<HTML>Choose the geometry of the capillary bundle pore model.<br><br>',...
    '<u>Available options:</u><br>',...
    '<b>cylindrical</b> <br>',...
    '<b>right angular</b> <br>',...
    '<b>polygon</b> <br><br>',...
    '<u>Default value:</u><br>',...
    '<b>cylindrical</b> <br>'];
gui.popup_handles.geometry_type = uicontrol('Parent',gui.panels.geometry.HBox1,...
    'Style','popup','String',{'cylindrical','right angular','polygon'},...
    'Value',1,'FontSize',myui.fontsize,'UserData',struct('Tooltipstr',tstr),...
    'Callback',@onPopupGeometryType);
tstr = ['<HTML>Number of polygon sides<br><br>',...
    '<u>Available options:</u><br>',...
    '<b>3</b> to <b>12</b> <br><br>',...
    '<u>Default value:</u><br>',...
    '<b>3</b> <br>'];
gui.popup_handles.polyN = uicontrol('Parent',gui.panels.geometry.HBox1,...
    'Style','popup','String',{'3','4','5','6','7','8','9','10','11','12'},...
    'Value',1,'FontSize',myui.fontsize,'UserData',struct('Tooltipstr',tstr),...
    'Enable','off','Callback',@onPopupGeometryPolyN);
set(gui.panels.geometry.HBox1,'Widths',[200 -2 -1]);

%% angles
gui.text_handles.angles = uicontrol('Parent',gui.panels.geometry.HBox2,...
    'Style','text','FontSize',myui.fontsize,'HorizontalAlignment','center',...
    'String',['angles  -  ',char(hex2dec('03B1')),' [°] | ',...
    char(hex2dec('03B2')),' [°] | ',char(hex2dec('03B3')),' [°]']);
tstr = ['<HTML>For <b>right angular</b> geometry:<br><br>',...
    'angle ',char(hex2dec('03B1')),' is always 90°<br>',...
    'angle ',char(hex2dec('03B2')),' is adjustable<br>',...
    'angle ',char(hex2dec('03B3')),' gets calculated from the other two.<br><br>',...
    '<u>Default value:</u><br>',...
    '<b>90 45 45</b><br><br>',...
    'For <b>polygon</b> geometry only one angle is needed:<br><br>',...
    'angle ',char(hex2dec('03B2')),' automatically changes by number of polygon sides<br>'];
gui.edit_handles.alpha = uicontrol('Parent',gui.panels.geometry.HBox2,...
    'Style','edit','String',num2str(data.geometry.alpha),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.geometry.alpha 1 1]),...
    'Tag','geometry_alpha','Enable','off','Callback',@onEditValue);
gui.edit_handles.beta = uicontrol('Parent',gui.panels.geometry.HBox2,...
    'Style','edit','String',num2str(data.geometry.beta),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.geometry.beta 1 1]),...
    'Tag','geometry_beta','Enable','off','Callback',@onEditValue);
gui.edit_handles.gamma = uicontrol('Parent',gui.panels.geometry.HBox2,...
    'Style','edit','String',num2str(data.geometry.gamma),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.geometry.gamma 1 1]),...
    'Tag','geometry_gamma','Enable','off','Callback',@onEditValue);
set(gui.panels.geometry.HBox2,'Widths',[200 -1 -1 -1]);

%% single pore or pore size distribution
gui.text_handles.singlepsd = uicontrol('Parent',gui.panels.geometry.HBox3,...
    'Style','text','FontSize',myui.fontsize,'HorizontalAlignment','center',...
    'String','single pore / PSD');
tstr = 'Choose between single pore and pore size distribution (PSD)';
gui.popup_handles.singlepsd = uicontrol('Parent',gui.panels.geometry.HBox3,...
    'Style','popup','String',{'single pore','pore size distribution (PSD)'},...
    'Value',1,'FontSize',myui.fontsize,'UserData',struct('Tooltipstr',tstr),...
    'Enable','on','Callback',@onPopupGeometrySinglePSD);
set(gui.panels.geometry.HBox3,'Widths',[200 -1]);

%% PSD range and points per decade
gui.text_handles.psd_range = uicontrol('Parent',gui.panels.geometry.HBox4,...
    'Style','text','FontSize',myui.fontsize,'HorizontalAlignment','center',...
    'String','PSD - min [m] | max [m] | # / dec');
tstr = 'minimum value in PSD range';
gui.edit_handles.range_min = uicontrol('Parent',gui.panels.geometry.HBox4,...
    'Style','edit','String',num2str(data.geometry.range(1,1)),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.geometry.range(1,1) 1 1]),...
    'Tag','geometry_range','Enable','off','Callback',@onEditValue);
tstr = 'maximum value in PSD range';
gui.edit_handles.range_max = uicontrol('Parent',gui.panels.geometry.HBox4,...
    'Style','edit','String',num2str(data.geometry.range(1,2)),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.geometry.range(1,2) 1 2]),...
    'Tag','geometry_range','Enable','off','Callback',@onEditValue);
tstr = ['<HTML>Set number of steps per decade in PSD.<br><br>',...
    '<u>Default value:</u><br>',...
    '<b>25</b><br>'];
gui.edit_handles.rangeN = uicontrol('Parent',gui.panels.geometry.HBox4,...
    'Style','edit','String',num2str(data.geometry.rangeN),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.geometry.rangeN 1 1]),...
    'Tag','geometry_rangeN','Enable','off','Callback',@onEditValue);
set(gui.panels.geometry.HBox4,'Widths',[200 -1 -1 -1]);

%% number of PSD modes
gui.text_handles.modesN = uicontrol('Parent',gui.panels.geometry.HBox5,...
    'Style','text','FontSize',myui.fontsize,'HorizontalAlignment','center',...
    'String','PSD - # modes');
tstr = ['<HTML>Choose the number of modes in the pore size distribution<br><br>',...
    '<u>Available options:</u><br>',...
    '<b>1</b> to <b>3</b> <br><br>',...
    '<u>Default value:</u><br>',...
    '<b>1</b> <br>'];
gui.popup_handles.modesN = uicontrol('Parent',gui.panels.geometry.HBox5,...
    'Style','popup','String',{'1','2','3'},...
    'Value',1,'FontSize',myui.fontsize,'UserData',struct('Tooltipstr',tstr),...
    'Enable','off','Callback',@onPopupGeometryModesN);
set(gui.panels.geometry.HBox5,'Widths',[200 -1]);

%% PSD mode, sigma and rel. amplitude
gui.text_handles.mode1 = uicontrol('Parent',gui.panels.geometry.HBox6,...
    'Style','text','FontSize',myui.fontsize,'HorizontalAlignment','center',...
    'String',['#1 - radius [m] | ',char(hex2dec('03C3')),' | amplitude']);
tstr = ['<HTML>Set the equivalent radius.<br>',...
    'For non-cylindrical pores this is the radius of the area-equivalent cylinder r=sqrt(A/pi).<br>',...
    'When a PSD is used this value refers to the mode (peak) of the distribution.<br><br>',...
    '<u>Default value:</u><br>',...
    '<b>1e-5 m</b><br>'];
gui.edit_handles.mode1 = uicontrol('Parent',gui.panels.geometry.HBox6,...
    'Style','edit','String',num2str(data.geometry.radius),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.geometry.radius 1 1]),...
    'Tag','geometry_modes','Enable','on','Callback',@onEditValue);
tstr = ['<HTML>Set the width &sigma of the PSD.<br><br>',...
    '<u>Default value:</u><br>',...
    '<b>0.3</b><br>'];
gui.edit_handles.sig1 = uicontrol('Parent',gui.panels.geometry.HBox6,...
    'Style','edit','String',num2str(data.geometry.modes(1,2)),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.geometry.modes(1,2) 1 2]),...
    'Tag','geometry_modes','Enable','off','Callback',@onEditValue);
tstr = ['<HTML>Set the relative amplitude of the corresponding mode.<br><br>',...
    '<u>Default value:</u><br>',...
    '<b>1</b><br>'];
gui.edit_handles.amp1 = uicontrol('Parent',gui.panels.geometry.HBox6,...
    'Style','edit','String',num2str(data.geometry.modes(1,3)),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.geometry.modes(1,3) 1 3]),...
    'Tag','geometry_modes','Enable','off','Callback',@onEditValue);
set(gui.panels.geometry.HBox6,'Widths',[200 -1 -1 -1]);

gui.text_handles.mode2 = uicontrol('Parent',gui.panels.geometry.HBox7,...
    'Style','text','FontSize',myui.fontsize,'HorizontalAlignment','center',...
    'String',['#2 - radius [m] | ',char(hex2dec('03C3')),' | amplitude']);
gui.edit_handles.mode2 = uicontrol('Parent',gui.panels.geometry.HBox7,...
    'Style','edit','String',num2str(data.geometry.modes(2,1)),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr','','defaults',[data.geometry.modes(2,1) 2 1]),...
    'Tag','geometry_modes','Enable','off','Callback',@onEditValue);
gui.edit_handles.sig2 = uicontrol('Parent',gui.panels.geometry.HBox7,...
    'Style','edit','String',num2str(data.geometry.modes(2,2)),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr','','defaults',[data.geometry.modes(2,2) 2 2]),...
    'Tag','geometry_modes','Enable','off','Callback',@onEditValue);
gui.edit_handles.amp2 = uicontrol('Parent',gui.panels.geometry.HBox7,...
    'Style','edit','String',num2str(data.geometry.modes(2,3)),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr','','defaults',[data.geometry.modes(2,3) 2 3]),...
    'Tag','geometry_modes','Enable','off','Callback',@onEditValue);
set(gui.panels.geometry.HBox7,'Widths',[200 -1 -1 -1]);

gui.text_handles.mode3 = uicontrol('Parent',gui.panels.geometry.HBox8,...
    'Style','text','FontSize',myui.fontsize,'HorizontalAlignment','center',...
    'String',['#3 - radius [m] | ',char(hex2dec('03C3')),' | amplitude']);
gui.edit_handles.mode3 = uicontrol('Parent',gui.panels.geometry.HBox8,...
    'Style','edit','String',num2str(data.geometry.modes(3,1)),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr','','defaults',[data.geometry.modes(3,1) 3 1]),...
    'Tag','geometry_modes','Enable','off','Callback',@onEditValue);
gui.edit_handles.sig3 = uicontrol('Parent',gui.panels.geometry.HBox8,...
    'Style','edit','String',num2str(data.geometry.modes(3,2)),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr','','defaults',[data.geometry.modes(3,2) 3 2]),...
    'Tag','geometry_modes','Enable','off','Callback',@onEditValue);
gui.edit_handles.amp3 = uicontrol('Parent',gui.panels.geometry.HBox8,...
    'Style','edit','String',num2str(data.geometry.modes(3,3)),'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr','','defaults',[data.geometry.modes(3,3) 3 3]),...
    'Tag','geometry_modes','Enable','off','Callback',@onEditValue);
set(gui.panels.geometry.HBox8,'Widths',[200 -1 -1 -1]);

return

%------------- END OF CODE --------------

%% License:
% MIT License
%
% Copyright (c) 2018 Thomas Hiller
%
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
%
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.